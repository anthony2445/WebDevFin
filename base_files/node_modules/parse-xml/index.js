(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    return (root.parseXml = factory())
  } else {
    root.parseXml = factory()
  }
}(this, function () {
  return function parseXml(xml, arrayTags) {
    var dom = null
    if (window.DOMParser) {
      dom = (new DOMParser()).parseFromString(xml, "text/xml")
    } else {
      throw "DOMParser is not supported in this browser."
    }

    /**
     * Returns the JSON representation of an XML tag recursively.
     * 
     * @param {*} xmlNode 
     * @param {*} result 
     */
    function parseNode(xmlNode, result) {
      if (xmlNode.nodeName === "#text") {
        var v = xmlNode.nodeValue
        if (v.trim()) {
          result['#text'] = v
        }
        return
      }

      var jsonNode = {}
      var existing = result[xmlNode.nodeName]
      if (existing) {
        if (!Array.isArray(existing)) {
          result[xmlNode.nodeName] = [existing, jsonNode]
        } else {
          result[xmlNode.nodeName].push(jsonNode)
        }
      } else {
        if (arrayTags && arrayTags.indexOf(xmlNode.nodeName) !== -1) {
          result[xmlNode.nodeName] = [jsonNode]
        } else {
          result[xmlNode.nodeName] = jsonNode
        }
      }

      if (xmlNode.attributes) {
        var length = xmlNode.attributes.length
        for (var i = 0; i < length; i++) {
          var attribute = xmlNode.attributes[i]
          jsonNode[attribute.nodeName] = attribute.nodeValue
        }
      }

      var length = xmlNode.childNodes.length
      for (var i = 0; i < length; i++) {
        parseNode(xmlNode.childNodes[i], jsonNode)
      }
    }

    var result = {}
    if (dom.childNodes.length) {
      parseNode(dom.childNodes[0], result)
    }

    return result
  }
}))
